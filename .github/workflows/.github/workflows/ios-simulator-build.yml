name: iOS Simulator Build (Appetize)

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: macos-14
    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Select Xcode & show version
        run: |
          set -e
          if [ -d "/Applications/Xcode_16.0.app" ]; then
            sudo xcode-select -s /Applications/Xcode_16.0.app
          fi
          xcodebuild -version

      - name: Show repo tree (debug)
        run: |
          pwd
          ls -la
          find . -maxdepth 2 -print

      - name: Detect project/workspace and scheme
        id: detect
        shell: bash
        run: |
          set -euo pipefail
          # Find workspace or project anywhere in the repo
          if WORK=$(find . -type d -name "*.xcworkspace" | head -n1); then
            if [ -n "$WORK" ]; then
              KIND=workspace
              FILE="$WORK"
              LIST=$(xcodebuild -list -workspace "$FILE")
            fi
          fi
          if [ -z "${FILE:-}" ]; then
            PROJ=$(find . -type d -name "*.xcodeproj" | head -n1)
            if [ -z "$PROJ" ]; then
              echo "❌ No .xcodeproj or .xcworkspace found" >&2
              exit 1
            fi
            # Verify the project bundle actually contains project.pbxproj
            if [ ! -f "$PROJ/project.pbxproj" ]; then
              echo "❌ $PROJ exists but project.pbxproj is missing. This usually means LFS or files weren’t fetched." >&2
              exit 66
            fi
            KIND=project
            FILE="$PROJ"
            LIST=$(xcodebuild -list -project "$FILE")
          fi
          echo "$LIST"
          SCHEME=$(echo "$LIST" | awk '/Schemes:/{flag=1;next}/^$/{flag=0}flag' | head -n1 | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
          if [ -z "${SCHEME:-}" ]; then
            echo "❌ Could not detect a shared scheme. Make sure at least one scheme is Shared in Xcode." >&2
            exit 1
          fi
          echo "file=$FILE"   >> $GITHUB_OUTPUT
          echo "kind=$KIND"   >> $GITHUB_OUTPUT
          echo "scheme=$SCHEME" >> $GITHUB_OUTPUT

      - name: Build (iOS Simulator, signing OFF)
        env:
          CONFIG: Release
          SDK: iphonesimulator
          DEST: 'platform=iOS Simulator,name=iPhone 15 Pro'
          DERIVED: ${{ github.workspace }}/build
        run: |
          set -euo pipefail
          if [ "${{ steps.detect.outputs.kind }}" = "workspace" ]; then
            xcodebuild \
              -workspace "${{ steps.detect.outputs.file }}" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -sdk "$SDK" -configuration "$CONFIG" \
              -destination "$DEST" -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO build
          else
            xcodebuild \
              -project "${{ steps.detect.outputs.file }}" \
              -scheme "${{ steps.detect.outputs.scheme }}" \
              -sdk "$SDK" -configuration "$CONFIG" \
              -destination "$DEST" -derivedDataPath "$DERIVED" \
              CODE_SIGNING_ALLOWED=NO build
          fi

      - name: Zip .app for Appetize
        run: |
          set -euo pipefail
          APP_DIR="$GITHUB_WORKSPACE/build/Build/Products/${CONFIG}-iphonesimulator"
          echo "Looking in: $APP_DIR"
          ls -la "$APP_DIR" || true
          APP_PATH=$(echo "$APP_DIR"/*.app | head -n1)
          if [ ! -d "$APP_PATH" ]; then
            echo "❌ No .app found. Check build step for errors and scheme name." >&2
            exit 1
          fi
          cd "$APP_DIR"
          zip -r AppetizeBuild.app.zip "$(basename "$APP_PATH")"
          mv AppetizeBuild.app.zip "$GITHUB_WORKSPACE/"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: appetize-simulator-app
          path: AppetizeBuild.app.zip
